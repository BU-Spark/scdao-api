version: '3.7'
services:
  nginx:
    image: nginx:1.17
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt:/etc/letsencrypt
    ports:
      - 80:80
      - 443:443
    depends_on:
      - backend
      - frontend
  redis:
    image: redis
    ports:
      - 6379:6379

  postgres:
    image: postgres:12
    restart: always
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    ports:
      - '5432:5432'
    volumes:
      - db-data:/var/lib/postgresql/data:cached

  worker:
    build:
      context: backend
      dockerfile: Dockerfile
    command: celery worker -A app.tasks --loglevel=DEBUG -Q main-queue -c 1 -b redis://redis:6379/0
    volumes:
      - ./backend:/app/:cached
    environment:
      PYTHONPATH: .
      S3_KEY_INTERNAL: '${S3_KEY_INTERNAL}'
      S3_SECRET_INTERNAL: '${S3_SECRET_INTERNAL}'
      DATABASE_URL: 'postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/postgres'
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"

  flower:  
    image: mher/flower
    command: flower --broker=redis://redis:6379/0 --port=5555
    ports:
      - 5555:5555
    depends_on:
      - "redis"

  backend:
    build:
      context: backend
      dockerfile: Dockerfile
    command: python app/main.py
    tty: true
    volumes:
      - ./backend:/app/:cached
      - ./.docker/.ipython:/root/.ipython:cached
    environment:
      PYTHONPATH: .
      DATABASE_URL: 'postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/postgres'
      HASH_KEY: "${HASH_KEY}"
      HASH_ALG: "${HASH_ALG}"
      JWT_Token_TTL: 120
      S3_BUCKET_NAME: '${S3_BUCKET_NAME}'
      S3_KEY_INTERNAL: '${S3_KEY_INTERNAL}'
      S3_SECRET_INTERNAL: '${S3_SECRET_INTERNAL}'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend:8888/api"]
      interval: 15s
      timeout: 30s
      retries: 5
    depends_on:
      - "postgres"
      - "redis"

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    stdin_open: true
    volumes:
      - './frontend:/app:cached'
      - './frontend/node_modules:/app/node_modules:cached'
#    environment:
     # - NODE_ENV=development


volumes:
  db-data:
